{"version":3,"sources":["quadtree.coffee","systems/check-collisions.worker.ts"],"names":["root","factory","define","amd","exports","module","this","Quadtree","arg","child","that","x","y","width","height","maxElements","Error","contents","oversized","size","Number","isInteger","children","NW","create","Math","max","floor","tree","NE","ceil","SW","SE","get","boundingBoxCollision","calculateDirection","fitting","getCenter","observe","splitTree","unobserve","validateElement","item","ref","ref1","elt1","elt2","ref2","ref3","element","quadCenter","bottomHeight","leftWidth","rightWidth","topHeight","coordinates","direction","where","push","writeAccessors","propName","Object","defineProperty","set","val","remove","configurable","unwriteAccessors","clear","results","doObserve","pushAll","items","candidate","content","contentDir","elements","fifo","fifoCandidates","fits","j","k","l","len","len1","len2","relatedChild","length","shift","stillObserve","index","indexOf","splice","colliding","collisionFunction","elt","top","onCollision","callback","query","check","key","find","each","action","i","predicate","filter","deepclone","target","copycat","reject","visit","bind","pretty","indent","indentation","isParent","str","level","res","label","unshift"],"mappings":"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","file":"check-collisions.worker.d77f0b91.js","sourceRoot":"../src","sourcesContent":["# quadtree-lib\n# ============\n#\n# **Quadtree-lib** is an easy to use, developer friendly quadtree library\n# which contains many helper methods to add, remove, iterate, filter, simulate\n# collisions over 2d elements and more.\n\n# #### UMD bundling related code\n((root, factory) ->\n    if typeof define is 'function' and define.amd\n        define [], factory\n    else if typeof exports is 'object' and module.exports\n        module.exports = factory()\n    else\n        root['Quadtree'] = factory()\n) @, (-> class Quadtree\n    # The Quadtree class\n    # -------------------\n\n    # ### Constructor\n\n    # The quadtree constructor accepts a single parameter object containing the following properties :\n    # - width / length : dimensions of the quadtree. [ *mandatory* ]\n    # - maxElements : the maximum number of elements before the leaf 'splits' into subtrees. [ *defaults to 1* ]\n    # - x / y : these coordinates are used internally by the library to position subtrees. [ *internal use only* ]\n    constructor: ({ @x, @y, @width, @height, @maxElements }) ->\n\n        # An error is thrown when the width & length are not passed as constructor arguments.\n        throw new Error 'Missing quadtree dimensions.' if not @width? or not @height?\n        @x ?= 0\n        @y ?= 0\n        @maxElements ?= 1\n        @contents = []\n        @oversized = []\n        @size = 0\n\n        # Dimension & coordinates are checked, an error is thrown in case of bad input.\n        throw new Error 'Dimensions must be positive integers.' if @width < 1 or @height < 1\n        throw new Error 'Coordinates must be integers' if not Number.isInteger(@x) or not Number.isInteger(@y)\n        throw new Error 'The maximum number of elements before a split must be a positive integer.' if @maxElements < 1\n\n        that = @\n\n        # The subtrees list, by position.\n        @children = {\n            # Northwest tree.\n            NW:\n                create: ->\n                    new Quadtree({\n                        x: that.x\n                        y: that.y\n                        width: Math.max (Math.floor that.width / 2), 1\n                        height: Math.max (Math.floor that.height / 2), 1\n                        maxElements: that.maxElements\n                    })\n                tree: null\n            # Northeast tree.\n            NE:\n                create: ->\n                    new Quadtree({\n                        x: that.x + Math.max (Math.floor that.width / 2), 1\n                        y: that.y\n                        width: Math.ceil that.width / 2\n                        height: Math.max (Math.floor that.height / 2), 1\n                        maxElements: that.maxElements\n                    })\n                tree: null\n            # Southwest tree.\n            SW:\n                create: ->\n                    new Quadtree({\n                        x: that.x\n                        y: that.y + Math.max (Math.floor that.height / 2), 1\n                        width: Math.max (Math.floor that.width / 2), 1\n                        height: Math.ceil that.height / 2\n                        maxElements: that.maxElements\n                    })\n                tree: null\n            # Southeast tree.\n            SE:\n                create: ->\n                    new Quadtree({\n                        x: that.x + Math.max (Math.floor that.width / 2), 1\n                        y: that.y + Math.max (Math.floor that.height / 2), 1\n                        width: Math.ceil that.width / 2\n                        height: Math.ceil that.height / 2\n                        maxElements: that.maxElements\n                    })\n                tree: null\n        }\n        # Adding a getter which lazily creates the tree.\n        for child of @children\n            @children[child].get = ->\n                if @tree? then @tree else @tree = @create(); @tree\n\n    # ### Internal methods & vars\n\n    # Retrieves the center coordinates of a rectangle.\n    getCenter = (item) ->\n        x: Math.floor((item.width  ? 1) / 2) + item.x\n        y: Math.floor((item.height ? 1) / 2) + item.y\n\n    # Bounding box collision algorithm.\n    boundingBoxCollision = (elt1, elt2) ->\n        not(elt1.x >= elt2.x + (elt2.width ? 1)      or\n            elt1.x + (elt1.width ? 1) <= elt2.x      or\n            elt1.y >= elt2.y + (elt2.height ? 1)     or\n            elt1.y + (elt1.height ? 1) <= elt2.y)\n\n    # Determines which subtree an element belongs to.\n    calculateDirection = (element, tree) ->\n        quadCenter = getCenter tree\n\n        if element.x < quadCenter.x\n            if element.y < quadCenter.y then 'NW'\n            else 'SW'\n        else\n            if element.y < quadCenter.y then 'NE'\n            else 'SE'\n\n    # Validates a potential element of the tree.\n    validateElement = (element) ->\n        if not (typeof element is 'object')\n            throw new Error 'Element must be an Object.'\n        if not element.x? or not element.y?\n            throw new Error 'Coordinates properties are missing.'\n        if element?.width < 0 or element?.height < 0\n            throw new Error 'Width and height must be positive integers.'\n\n    # Returns splitted coordinates and dimensions.\n    splitTree = (tree) ->\n        leftWidth    = Math.max (Math.floor tree.width / 2), 1\n        rightWidth   = Math.ceil tree.width / 2\n        topHeight    = Math.max (Math.floor tree.height / 2), 1\n        bottomHeight = Math.ceil tree.height / 2\n        NW:\n            x: tree.x\n            y: tree.y\n            width: leftWidth\n            height: topHeight\n        NE:\n            x: tree.x + leftWidth\n            y: tree.y\n            width: rightWidth\n            height: topHeight\n        SW:\n            x: tree.x\n            y: tree.y + topHeight\n            width: leftWidth\n            height: bottomHeight\n        SE:\n            x: tree.x + leftWidth\n            y: tree.y + topHeight\n            width: rightWidth\n            height: bottomHeight\n\n    # Determines wether an element fits into subtrees.\n    fitting = (element, tree) ->\n        where = []\n        for direction, coordinates of splitTree tree when boundingBoxCollision element, coordinates\n            where.push direction\n        where\n\n    # Add getters and setters for coordinates and dimensions properties in order to automatically reorganize the elements on change.\n    observe = (item, tree) ->\n        writeAccessors = (propName) ->\n            item[\"_#{propName}\"] = item[propName]\n            Object.defineProperty item, propName, {\n                set: (val) ->\n                    tree.remove @, true\n                    @[\"_#{propName}\"] = val\n                    tree.push @\n                get: ->\n                    @[\"_#{propName}\"]\n                configurable: true\n            }\n        writeAccessors 'x'\n        writeAccessors 'y'\n        writeAccessors 'width'\n        writeAccessors 'height'\n\n    # Remove getters and setters and restore previous properties\n    unobserve = (item) ->\n        unwriteAccessors = (propName) ->\n            if not item[\"_#{propName}\"]? then return\n            delete item[propName]\n            item[propName] = item[\"_#{propName}\"]\n            delete item[\"_#{propName}\"]\n        unwriteAccessors 'x'\n        unwriteAccessors 'y'\n        unwriteAccessors 'width'\n        unwriteAccessors 'height'\n\n    # ### Exposed methods\n\n    # Removes all elements from the quadtree and restores it to pristine state.\n    clear: ->\n        @contents = []\n        @oversized = []\n        @size = 0\n        for child of @children\n            @children[child].tree = null\n\n    # Add an element to the quadtree.\n    # Elements can be observed to reorganize them into the quadtree automatically whenever their coordinates or dimensions are set (for ex. obj.x = ...).\n    push: (item, doObserve) ->\n        @pushAll([item], doObserve)\n\n    # Push an array of elements.\n    pushAll: (items, doObserve) ->\n        for item in items\n            validateElement item\n            observe item, @ if doObserve\n\n        fifo = [tree: @, elements: items]\n\n        while fifo.length > 0\n            { tree, elements } = fifo.shift()\n\n            fifoCandidates = { NW: null, NE: null, SW: null, SE: null }\n\n            for element in elements\n                tree.size++\n\n                fits = fitting element, tree\n\n                if fits.length isnt 1 or tree.width is 1 or tree.height is 1\n                    tree.oversized.push element\n\n                else if (tree.size - tree.oversized.length) <= tree.maxElements\n                    tree.contents.push element\n\n                else\n                    direction = fits[0]\n                    relatedChild = tree.children[direction]\n                    fifoCandidates[direction] ?= { tree: relatedChild.get(), elements: [] }\n                    fifoCandidates[direction].elements.push(element)\n\n                    for content in tree.contents\n                        contentDir = (fitting content, tree)[0]\n                        fifoCandidates[contentDir] ?= { tree: tree.children[contentDir].get(), elements: [] }\n                        fifoCandidates[contentDir].elements.push(content)\n\n                    tree.contents = []\n\n            for direction, candidate of fifoCandidates\n                if candidate? then fifo.push candidate\n\n        @\n\n    # Removes an element from the quadtree.\n    remove: (item, stillObserve) ->\n        validateElement item\n\n        index = @oversized.indexOf item\n        if index > -1\n            @oversized.splice index, 1\n            @size--\n            if not stillObserve then unobserve item\n            return true\n\n        index = @contents.indexOf item\n        if index > -1\n            @contents.splice index, 1\n            @size--\n            if not stillObserve then unobserve item\n            return true\n\n        relatedChild = @children[calculateDirection item, @]\n\n        if relatedChild.tree? and relatedChild.tree.remove item, stillObserve\n            @size--\n            relatedChild.tree = null if relatedChild.tree.size is 0\n            return true\n\n        false\n\n    # Returns an array of elements which collides with the `item` argument.\n    # `item` being an object having x, y, width & height properties.\n\n    # The default collision function is a basic bounding box algorithm.\n    # You can change it by providing a function as a second argument.\n    #```javascript\n    #colliding({x: 10, y: 20}, function(element1, element2) {\n    #    return // Place predicate here //\n    #})\n    #```\n    colliding: (item, collisionFunction = boundingBoxCollision) ->\n        validateElement item\n\n        items = []\n        fifo  = [@]\n\n        while fifo.length > 0\n            top = fifo.shift()\n\n            for elt in top.oversized when elt isnt item and collisionFunction item, elt then items.push elt\n            for elt in top.contents  when elt isnt item and collisionFunction item, elt then items.push elt\n\n            fits = fitting item, top\n\n            # Special case for elements located outside of the quadtree on the right / bottom side\n            if fits.length is 0\n                fits = []\n                if item.x >= top.x + top.width\n                    fits.push 'NE'\n                if item.y >= top.y + top.height\n                    fits.push 'SW'\n                if fits.length > 0\n                    if fits.length is 1 then fits.push 'SE' else fits = ['SE']\n\n            for child in fits when top.children[child].tree?\n                fifo.push top.children[child].tree\n\n        items\n\n    # Performs an action on elements which collides with the `item` argument.\n    # `item` being an object having x, y, width & height properties.\n\n    # The default collision function is a basic bounding box algorithm.\n    # You can change it by providing a function as a third argument.\n    #```javascript\n    #onCollision(\n    #    {x: 10, y: 20},\n    #    function(item) { /* stuff */ },\n    #    function(element1, element2) {\n    #        return // Place predicate here //\n    #})\n    #```\n    onCollision: (item, callback, collisionFunction = boundingBoxCollision) ->\n        validateElement item\n\n        fifo  = [@]\n\n        while fifo.length > 0\n            top = fifo.shift()\n\n            for elt in top.oversized when elt isnt item and collisionFunction item, elt then callback elt\n            for elt in top.contents  when elt isnt item and collisionFunction item, elt then callback elt\n\n            fits = fitting item, top\n\n            # Special case for elements located outside of the quadtree on the right / bottom side\n            if fits.length is 0\n                fits = []\n                if item.x >= top.x + top.width\n                    fits.push 'NE'\n                if item.y >= top.y + top.height\n                    fits.push 'SW'\n                if fits.length > 0\n                    if fits.length is 1 then fits.push 'SE' else fits = ['SE']\n\n            for child in fits when top.children[child].tree?\n                fifo.push top.children[child].tree\n\n        return null\n\n    # Alias of `where`.\n    get: (query) ->\n        @where query\n    # Returns an array of elements that match the `query` argument.\n    where: (query) ->\n        # Naïve parsing (missing coordinates)\n        if typeof query is 'object' and (not query.x? or not query.y?)\n            return @find (elt) ->\n                check = true\n                for key of query when query[key] isnt elt[key] then check = false\n                check\n\n        # Optimised parsing\n        validateElement query\n\n        items = []\n        fifo = [@]\n\n        while fifo.length > 0\n            top = fifo.shift()\n\n            for elt in top.oversized\n                check = true\n                for key of query when query[key] isnt elt[key] then check = false\n                items.push elt if check\n            for elt in top.contents\n                check = true\n                for key of query when query[key] isnt elt[key] then check = false\n                items.push elt if check\n\n            relatedChild = top.children[calculateDirection query, top]\n\n            if relatedChild.tree?\n                fifo.push relatedChild.tree\n\n        items\n\n    # For each element of the quadtree, performs the `action` function.\n    #```javascript\n    #quad.each(function(item) { console.log(item) })\n    #```\n    each: (action) ->\n        fifo = [@]\n\n        while fifo.length > 0\n            top = fifo.shift()\n            for i in top.oversized then action?(i)\n            for i in top.contents then action?(i)\n\n            for child of top.children when top.children[child].tree?\n                fifo.push top.children[child].tree\n        @\n\n    # Returns an array of elements which validates the predicate.\n    find: (predicate) ->\n        fifo = [@]\n        items = []\n\n        while fifo.length > 0\n            top = fifo.shift()\n            for i in top.oversized when predicate?(i) then items.push i\n            for i in top.contents when predicate?(i) then items.push i\n\n            for child of top.children when top.children[child].tree?\n                fifo.push top.children[child].tree\n        items\n\n    # Returns a **cloned** `Quadtree` object which contains only the elements that validate the predicate.\n    filter: (predicate) ->\n        deepclone = (target) ->\n            copycat = new Quadtree x: target.x, y: target.y, width: target.width, height: target.height, maxElements: target.maxElements\n            copycat.size = 0\n            for child of target.children when target.children[child].tree?\n                copycat.children[child].tree = deepclone target.children[child].tree\n                copycat.size += copycat.children[child].tree?.size ? 0\n\n            for item in target.oversized when not predicate? or predicate?(item)\n                copycat.oversized.push item\n            for item in target.contents when not predicate? or predicate?(item)\n                copycat.contents.push item\n\n            copycat.size += copycat.oversized.length + copycat.contents.length\n            if copycat.size is 0 then null else copycat\n\n        deepclone @\n\n    # Opposite of filter.\n    reject: (predicate) ->\n        @filter (i) ->\n            not predicate?(i)\n\n    # Visits each tree & subtree contained in the `Quadtree` object.\n    # For each node, performs the `action` function, inside which `this` is bound to the node tree object.\n    visit: (action) ->\n        fifo = [@]\n\n        while fifo.length > 0\n            that = fifo.shift()\n            action.bind(that)()\n\n            for child of that.children when that.children[child].tree?\n                fifo.push that.children[child].tree\n        @\n\n    # Pretty printing function.\n    pretty: ->\n        str = ''\n\n        indent = (level) ->\n            res = ''\n            res += '   ' for times in [level...0]\n            res\n\n        fifo  = [{ label: 'ROOT', tree: @, level: 0 }]\n        while fifo.length > 0\n            top = fifo.shift()\n            indentation = indent(top.level)\n            str += \"\"\"\n                   #{indentation}| #{top.label}\n                   #{indentation}| ------------\\n\n                   \"\"\"\n\n            if top.tree.oversized.length > 0\n                str += \"\"\"\n                       #{indentation}| * Oversized elements *\n                       #{indentation}|   #{top.tree.oversized}\\n\n                       \"\"\"\n\n            if top.tree.contents.length > 0\n                str += \"\"\"\n                       #{indentation}| * Leaf content *\n                       #{indentation}|   #{top.tree.contents}\\n\n                       \"\"\"\n\n            isParent = false\n            for child of top.tree.children when top.tree.children[child].tree?\n                isParent = true\n                fifo.unshift { label: child, tree: top.tree.children[child].tree, level: top.level + 1 }\n\n            if isParent then str += \"#{indentation}└──┐\\n\"\n\n        str\n)\n","import Quadtree, { QuadtreeItem } from 'quadtree-lib'\n\ninterface TItem extends QuadtreeItem {\n  i: number\n  x: number\n  y: number\n  width: number\n  height: number\n  minX: number\n  minY: number\n  maxX: number\n  maxY: number\n}\n\nconst tree = new Quadtree({\n  width: 9096,\n  height: 9096,\n  maxElements: 16,\n})\nconst collisions = new Map<number, number[]>()\nconst items = new Map<number, TItem>()\n\n// skip comparison with self\nconst comparator = (a: TItem, b: TItem) => {\n  if (a.i === b.i) return false\n\n  return a.minX <= b.maxX && a.maxX >= b.minX && a.minY <= b.maxY && a.maxY >= b.minY\n}\n\nself.addEventListener('message', (message) => {\n  const { pos, dim } = message.data as { pos: Float64Array; dim: Float64Array }\n\n  // clear previous tree\n  tree.clear()\n\n  // clear previous collisions\n  collisions.clear()\n\n  // build items\n  for (let i = 0; i < pos.length; i += 2) {\n    const [x, y] = [pos[i], pos[i + 1]]\n    const [width, height] = [dim[i], dim[i + 1]]\n\n    const halfWidth = (width - 1) / 2\n    const halfHeight = (height - 1) / 2\n\n    items.set(i, {\n      i,\n\n      x,\n      y,\n\n      width,\n      height,\n\n      minX: x - halfWidth,\n      minY: y - halfHeight,\n\n      maxX: x + halfWidth,\n      maxY: y + halfHeight,\n    })\n  }\n\n  // rebuild tree\n  for (let i = 0; i < pos.length; i += 2) {\n    tree.push(items.get(i)!)\n  }\n\n  // detect and store collisions\n  for (let i = 0; i < pos.length; i += 2) {\n    // @ts-ignore\n    const collided = tree.colliding(items.get(i)!, comparator)\n\n    collisions.set(\n      i,\n      collided.map((t: any) => t.i),\n    )\n  }\n\n  // @ts-ignore send results back\n  self.postMessage(collisions)\n})\n"]}